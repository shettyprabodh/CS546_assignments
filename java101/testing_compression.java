import java.util.*;
import java.nio.*;

public class testing_compression{
  private int byteArrayToInt(byte[] byte_array){
    assert(byte_array.length == Integer.BYTES);
    int shifts = 0; // 2^i bit shifts
    int result = 0;

    for(int i=Integer.BYTES - 1; i >= 0; i--){
      // Magic. Without "& 0xFF", we are getting negative numbers in some cases.
      result |= ((byte_array[i]&(0xFF))*(1 << shifts));
      shifts += 8;
    }

    return result;
  }

  private ArrayList<Integer> getDecodedList(byte[] byte_array, boolean is_compressed){
    ArrayList<Integer> decoded_list = new ArrayList<Integer>();

    // Uncompressed version
    if(!is_compressed){
      int decoded_list_pointer = 0;
      for(int i=0; i<byte_array.length; i+=4){
        decoded_list.add(this.byteArrayToInt(Arrays.copyOfRange(byte_array, i, i+4)));
      }
    }
    else{
      this.vByteDecode(byte_array, decoded_list);
    }
    System.out.println("Decoded List(in get decoded list): " + Arrays.toString(decoded_list.toArray()));
    return decoded_list;
  }

  // Get size of encoded list
  private int getEncodedListSize(){
    int num_of_integers = 0;
    for(int i=0; i<this.postings.size(); i++){
      DocumentPostings doc_postings = this.postings.get(i);
      num_of_integers += (2 + doc_postings.getPositionsSize());
    }

    return num_of_integers;
  }

  // TODO: Need to complete v_byte compression
  private byte[] getEncodedList(boolean is_compression_required){
    int[] encoded_list = new int[this.getEncodedListSize()];

    if(is_compression_required){
      this.deltaEncodePostings();
    }

    int encoded_list_pointer = 0;
    for(int i=0; i<this.postings.size(); i++){
      DocumentPostings doc_postings = this.postings.get(i);
      ArrayList<Integer> positions = doc_postings.getAllPositions();

      encoded_list[encoded_list_pointer++] = doc_postings.getDocId();
      encoded_list[encoded_list_pointer++] = doc_postings.getDocumentTermFrequency();
      for(int j=0; j<positions.size(); j++){
        encoded_list[encoded_list_pointer++] = positions.get(j);
      }
    }

    // TODO: Need to complete v_byte compression
    // Byte related compressions
    int num_bytes = (encoded_list.length)*(Integer.BYTES);
    ByteBuffer byte_buffer = ByteBuffer.allocate(num_bytes);
    IntBuffer int_buffer = byte_buffer.asIntBuffer();
    System.out.println(Arrays.toString(encoded_list));
    if(is_compression_required){
      this.vByteEncode(encoded_list, byte_buffer);
      // byte_buffer.compact();
      System.out.println("Rem: " + byte_buffer.remaining() + " Offset: " + byte_buffer.arrayOffset() + " Position: " + byte_buffer.position() + " Limit: " + byte_buffer.limit() + " Capacity: " + byte_buffer.capacity());
    }
    else{
      int_buffer.put(encoded_list);
      System.out.println("Rem: " + byte_buffer.remaining() + " Offset: " + byte_buffer.arrayOffset() + " Position: " + byte_buffer.position() + " Limit: " + byte_buffer.limit() + " Capacity: " + byte_buffer.capacity());
    }
    int position = byte_buffer.position();
    byte[] b_array = byte_buffer.array();
    System.out.println("b_array size: " + b_array.length);
    if(is_compression_required){
      b_array = Arrays.copyOfRange(b_array, 0, position);
    }
    System.out.println("b_array size: " + b_array.length);

    return b_array;
  }

  public static void main(String[] args){
    int[] A = new int[]{1, 1, 850, 2, 5, 701, 866, 710, 1770, 827, 3, 2, 204, 2334, 4, 2, 19, 93, 5, 2, 439, 656, 8, 3, 809, 934, 2300, 9, 1, 204, 10, 1, 2235, 11, 2, 579, 545, 13, 1, 321, 15, 6, 118, 467, 228, 881, 581, 1068, 17, 1, 34, 18, 2, 1403, 176, 19, 1, 656, 20, 3, 205, 232, 296, 24, 3, 338, 165, 762, 25, 1, 631, 26, 1, 522, 27, 2, 228, 252, 28, 2, 1340, 686, 30, 2, 168, 994, 33, 2, 260, 12, 34, 3, 17, 761, 402, 35, 1, 302, 36, 3, 82, 478, 125, 38, 7, 620, 892, 690, 1436, 752, 1494, 821, 39, 1, 743, 40, 9, 26, 127, 367, 193, 550, 454, 637, 553, 740, 43, 1, 586, 44, 3, 280, 612, 422, 46, 7, 53, 142, 213, 556, 514, 560, 520, 51, 1, 582, 52, 1, 165, 53, 1, 1491, 55, 2, 868, 216, 57, 1, 1739, 59, 1, 307, 60, 1, 88, 61, 3, 2273, 435, 2477, 62, 4, 183, 404, 1488, 421, 74, 1, 1242, 75, 1, 73, 76, 2, 72, 55, 100, 3, 744, 113, 921, 101, 2, 1892, 97, 102, 5, 712, 794, 1671, 1149, 1971, 103, 1, 767, 104, 4, 406, 142, 531, 253, 105, 3, 67, 371, 864, 107, 1, 481, 108, 2, 898, 546, 109, 2, 68, 225, 110, 1, 95, 111, 3, 189, 42, 597, 112, 3, 523, 189, 558, 114, 4, 118, 633, 416, 1200, 116, 2, 152, 14, 118, 1, 2558, 119, 1, 112, 122, 1, 784, 126, 2, 620, 1473, 128, 1, 316, 129, 2, 327, 618, 131, 2, 800, 1838, 132, 4, 513, 361, 951, 422, 140, 1, 1740, 142, 2, 45, 187, 143, 2, 1746, 193, 144, 2, 2852, 256, 145, 1, 314, 146, 1, 272, 147, 4, 883, 857, 1332, 953, 151, 3, 3695, 168, 4448, 155, 2, 16, 930, 158, 2, 225, 32, 159, 1, 772, 162, 1, 1035, 163, 3, 77, 81, 95, 166, 3, 67, 130, 757, 174, 2, 278, 428, 175, 1, 602, 176, 4, 288, 856, 365, 876, 178, 1, 267, 179, 3, 306, 391, 479, 181, 3, 129, 41, 298, 182, 3, 142, 67, 244, 183, 1, 149, 185, 2, 403, 206, 189, 3, 208, 9, 1381, 190, 2, 23, 605, 192, 1, 2063, 200, 1, 592, 205, 2, 1317, 261, 206, 4, 363, 62, 401, 257, 207, 1, 513, 208, 4, 430, 87, 1385, 1120, 212, 1, 623, 220, 2, 2704, 14, 222, 2, 853, 36, 225, 3, 868, 750, 1239, 233, 1, 738, 234, 1, 4067, 236, 1, 474, 239, 1, 400, 240, 1, 679, 241, 1, 207, 247, 3, 246, 1505, 612, 249, 1, 74, 262, 1, 280, 263, 1, 1197, 274, 1, 1280, 276, 1, 1089, 277, 1, 209, 278, 2, 1030, 600, 286, 2, 675, 1653, 287, 17, 40, 178, 228, 806, 557, 928, 761, 1023, 820, 1308, 1038, 1822, 1283, 1953, 1405, 2211, 1605, 288, 1, 425, 290, 1, 645, 292, 7, 32, 233, 314, 1123, 1004, 1580, 1033, 294, 1, 227, 295, 1, 959, 296, 1, 244, 300, 2, 871, 499, 302, 1, 542, 303, 2, 429, 11, 304, 2, 261, 91, 306, 1, 231, 309, 1, 438, 310, 1, 404, 315, 1, 789, 319, 1, 153, 320, 2, 684, 271, 326, 1, 42, 327, 1, 270, 328, 1, 365, 329, 4, 1357, 173, 1385, 741, 330, 1, 230, 331, 1, 631, 332, 1, 581, 337, 1, 574, 339, 5, 77, 765, 86, 1971, 318, 340, 4, 130, 253, 917, 460, 341, 4, 87, 8, 1206, 902, 342, 12, 221, 36, 375, 138, 456, 895, 1100, 965, 1300, 1112, 1779, 1136, 343, 6, 63, 229, 151, 449, 185, 729, 344, 2, 355, 895, 345, 2, 88, 352, 346, 2, 228, 92, 347, 3, 128, 51, 225, 348, 1, 96, 349, 4, 511, 103, 785, 182, 350, 3, 511, 423, 648, 351, 1, 322, 352, 2, 169, 480, 353, 1, 952, 354, 6, 442, 120, 506, 527, 735, 606, 357, 7, 118, 666, 393, 737, 467, 848, 558, 359, 7, 507, 754, 683, 963, 1601, 1050, 1621, 360, 1, 1187, 361, 2, 797, 1761, 362, 1, 1027, 365, 4, 1113, 73, 1289, 429, 366, 10, 108, 517, 242, 837, 660, 985, 782, 1031, 1021, 1107, 369, 2, 99, 189, 370, 4, 459, 929, 1035, 930, 371, 2, 791, 152, 373, 3, 98, 360, 282, 374, 3, 94, 61, 152, 375, 1, 125, 387, 2, 661, 29, 390, 1, 3145, 392, 1, 317, 393, 1, 509, 398, 1, 222, 400, 1, 2497, 403, 2, 434, 30, 405, 1, 198, 407, 1, 161, 408, 1, 2201, 412, 1, 668, 413, 1, 1532, 421, 4, 489, 128, 2052, 197, 422, 4, 213, 1405, 276, 2033, 423, 3, 1004, 260, 1255, 427, 3, 503, 243, 815, 430, 2, 55, 2370, 432, 1, 680, 434, 1, 1524, 442, 1, 223, 447, 7, 305, 844, 347, 1199, 437, 2055, 716, 451, 1, 281, 453, 3, 94, 1050, 489, 454, 1, 181, 456, 1, 50, 461, 1, 214, 462, 3, 1184, 339, 1315, 463, 3, 113, 1126, 230, 467, 3, 258, 2870, 488, 470, 1, 96, 472, 2, 301, 295, 473, 2, 542, 526, 474, 4, 79, 1269, 309, 1521, 475, 1, 402, 479, 1, 84, 483, 3, 128, 644, 1259, 484, 1, 387, 491, 3, 1934, 263, 3759, 499, 5, 244, 99, 264, 176, 266, 500, 1, 511, 502, 1, 240, 507, 2, 119, 101, 510, 1, 940, 511, 3, 630, 989, 1267, 513, 1, 161, 515, 1, 3474, 517, 1, 422, 518, 3, 122, 1191, 310, 520, 1, 1897, 525, 4, 199, 641, 761, 5836, 526, 2, 1397, 174, 527, 2, 344, 314, 529, 1, 348, 530, 1, 894, 532, 1, 314, 535, 5, 131, 39, 171, 734, 796, 536, 2, 184, 94, 539, 1, 216, 540, 1, 1303, 541, 1, 67, 542, 4, 70, 139, 129, 268, 547, 1, 559, 550, 1, 205, 551, 1, 376, 553, 1, 1723, 562, 1, 170, 567, 6, 21, 259, 294, 479, 389, 508, 568, 2, 737, 28, 569, 1, 260, 570, 8, 447, 236, 1302, 457, 1623, 528, 2052, 1090, 572, 4, 72, 1339, 1295, 2368, 573, 1, 1670, 575, 1, 319, 576, 1, 339, 579, 2, 244, 808, 582, 1, 266, 590, 1, 312, 600, 2, 495, 588, 609, 1, 35, 611, 1, 57, 615, 1, 28, 617, 2, 2121, 64, 620, 2, 316, 798, 621, 4, 19, 1035, 535, 1040, 622, 1, 533, 623, 6, 69, 302, 98, 463, 225, 491, 624, 6, 338, 159, 548, 463, 615, 498, 625, 3, 900, 24, 974, 627, 1, 1394, 628, 6, 243, 199, 342, 913, 559, 952, 629, 8, 110, 1746, 604, 1855, 783, 2947, 846, 2988, 630, 1, 693, 631, 5, 386, 770, 573, 804, 632, 634, 5, 95, 145, 541, 403, 1166, 636, 2, 120, 75, 637, 1, 199, 642, 1, 1345, 645, 4, 548, 83, 679, 1153, 646, 1, 1450, 655, 1, 312, 659, 1, 365, 663, 1, 1062, 670, 4, 296, 419, 1884, 551, 672, 3, 733, 587, 1124, 673, 4, 861, 317, 873, 927, 674, 1, 54, 677, 1, 449, 681, 1, 1530, 693, 4, 911, 129, 1166, 624, 694, 2, 913, 57, 695, 2, 727, 361, 697, 1, 286, 698, 1, 264, 705, 2, 279, 2245, 707, 1, 88, 710, 2, 101, 144, 711, 1, 679, 712, 2, 748, 69, 716, 1, 157, 717, 1, 2468, 720, 1, 1518, 722, 3, 1037, 491, 1596, 723, 1, 151, 724, 1, 272, 725, 5, 81, 239, 104, 382, 158, 727, 1, 95, 730, 1, 846, 731, 4, 894, 123, 1013, 306, 732, 2, 148, 1431, 734, 3, 241, 1178, 594, 735, 1, 187, 736, 1, 716, 739, 1, 152, 740, 2, 340, 159, 742, 1, 64, 743, 3, 235, 330, 267, 744, 4, 493, 51, 639, 533, 747, 5, 124, 138, 374, 194, 512};


  }
}
